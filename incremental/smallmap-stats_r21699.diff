diff --git a/src/lang/english.txt b/src/lang/english.txt
index 4708805..1abac0c 100644
--- a/src/lang/english.txt
+++ b/src/lang/english.txt
@@ -23,6 +23,7 @@ STR_NULL                                                        :
 STR_EMPTY                                                       :
 STR_UNDEFINED                                                   :(undefined string)
 STR_JUST_NOTHING                                                :Nothing
+STR_TINY_NOTHING                                                :{TINYFONT}Nothing
 
 # Cargo related strings
 # Plural cargo name
@@ -655,12 +656,14 @@ STR_SMALLMAP_CAPTION                                            :{WHITE}Map - {S
 STR_SMALLMAP_TYPE_CONTOURS                                      :Contours
 STR_SMALLMAP_TYPE_VEHICLES                                      :Vehicles
 STR_SMALLMAP_TYPE_INDUSTRIES                                    :Industries
+STR_SMALLMAP_TYPE_ROUTEMAP                                      :Link Statistics
 STR_SMALLMAP_TYPE_ROUTES                                        :Routes
 STR_SMALLMAP_TYPE_VEGETATION                                    :Vegetation
 STR_SMALLMAP_TYPE_OWNERS                                        :Owners
 STR_SMALLMAP_TOOLTIP_SHOW_LAND_CONTOURS_ON_MAP                  :{BLACK}Show land contours on map
 STR_SMALLMAP_TOOLTIP_SHOW_VEHICLES_ON_MAP                       :{BLACK}Show vehicles on map
 STR_SMALLMAP_TOOLTIP_SHOW_INDUSTRIES_ON_MAP                     :{BLACK}Show industries on map
+STR_SMALLMAP_TOOLTIP_SHOW_LINK_STATS_ON_MAP                     :{BLACK}Show link statistics on map
 STR_SMALLMAP_TOOLTIP_SHOW_TRANSPORT_ROUTES_ON                   :{BLACK}Show transport routes on map
 STR_SMALLMAP_TOOLTIP_SHOW_VEGETATION_ON_MAP                     :{BLACK}Show vegetation on map
 STR_SMALLMAP_TOOLTIP_SHOW_LAND_OWNERS_ON_MAP                    :{BLACK}Show land owners on map
@@ -693,10 +696,26 @@ STR_SMALLMAP_LEGENDA_TOWNS                                      :{TINYFONT}{BLAC
 STR_SMALLMAP_LEGENDA_INDUSTRIES                                 :{TINYFONT}{BLACK}Industries
 STR_SMALLMAP_LEGENDA_DESERT                                     :{TINYFONT}{BLACK}Desert
 STR_SMALLMAP_LEGENDA_SNOW                                       :{TINYFONT}{BLACK}Snow
+STR_SMALLMAP_LEGENDA_CAPACITY                                   :{TINYFONT}{BLACK}Capacity
+STR_SMALLMAP_LEGENDA_USAGE                                      :{TINYFONT}{BLACK}Usage
+STR_SMALLMAP_LEGENDA_PLANNED                                    :{TINYFONT}{BLACK}Planned Flow
+STR_SMALLMAP_LEGENDA_SENT                                       :{TINYFONT}{BLACK}Sent Cargo
+STR_SMALLMAP_LEGENDA_SHOW_TEXT                                  :{TINYFONT}{BLACK}As Text
+STR_SMALLMAP_LEGENDA_SHOW_GRAPH                                 :{TINYFONT}{BLACK}As Graphs
+
+STR_SMALLMAP_SUPPLY_CAPTION                                     :{BLACK}Monthly supply at {STATION}
+STR_SMALLMAP_SUPPLY                                             :{TINYFONT}{CARGO}
+STR_SMALLMAP_LINK_CAPTION                                       :{BLACK}Monthly traffic from {STATION} to {STATION}
+STR_SMALLMAP_LINK                                               :{TINYFONT}{STRING} -
+STR_SMALLMAP_LINK_CAPACITY                                      :{TINYFONT}  cap: {NUM}
+STR_SMALLMAP_LINK_USAGE                                         :{TINYFONT}  usg: {NUM}
+STR_SMALLMAP_LINK_PLANNED                                       :{TINYFONT}  pln: {NUM}
+STR_SMALLMAP_LINK_SENT                                          :{TINYFONT}  snt: {NUM}
 
 STR_SMALLMAP_TOOLTIP_TOGGLE_TOWN_NAMES_ON_OFF                   :{BLACK}Toggle town names on/off on map
 STR_SMALLMAP_CENTER                                             :{BLACK}Centre the smallmap on the current position
 STR_SMALLMAP_INDUSTRY                                           :{TINYFONT}{STRING} ({NUM})
+STR_SMALLMAP_LINKSTATS_LEGEND                                   :{TINYFONT}{STRING}
 STR_SMALLMAP_TOWN                                               :{TINYFONT}{WHITE}{TOWN}
 STR_SMALLMAP_DISABLE_ALL                                        :{BLACK}Disable all
 STR_SMALLMAP_ENABLE_ALL                                         :{BLACK}Enable all
@@ -4310,4 +4329,8 @@ STR_LORRY                                                       :{BLACK}{LORRY}
 STR_PLANE                                                       :{BLACK}{PLANE}
 STR_SHIP                                                        :{BLACK}{SHIP}
 
+STR_NUM                                                         :{NUM}
+STR_NUM_RELATION_2                                              :{NUM}/{NUM}
+STR_NUM_RELATION_3                                              :{NUM}/{NUM}/{NUM}
+STR_NUM_RELATION_4                                              :{NUM}/{NUM}/{NUM}/{NUM}
 STR_TOOLBAR_RAILTYPE_VELOCITY                                   :{STRING} ({VELOCITY})
diff --git a/src/newgrf.cpp b/src/newgrf.cpp
index 580ad49..e06af94 100644
--- a/src/newgrf.cpp
+++ b/src/newgrf.cpp
@@ -8069,6 +8069,9 @@ static void AfterLoadGRFs()
 	/* Create dynamic list of industry legends for smallmap_gui.cpp */
 	BuildIndustriesLegend();
 
+	/* build the routemap legend, based on the available cargos */
+	BuildLinkStatsLegend();
+
 	/* Add all new airports to the airports array. */
 	FinaliseAirportsArray();
 	BindAirportSpecs();
diff --git a/src/smallmap_gui.cpp b/src/smallmap_gui.cpp
index 68124de..196ae2e 100644
--- a/src/smallmap_gui.cpp
+++ b/src/smallmap_gui.cpp
@@ -25,34 +25,45 @@
 #include "vehicle_base.h"
 #include "sound_func.h"
 #include "window_func.h"
+#include "cargotype.h"
+#include "openttd.h"
+#include "company_func.h"
+#include "station_base.h"
 #include "company_base.h"
 
 #include "table/strings.h"
 
+#include <cmath>
+#include <vector>
+
 /** Widget numbers of the small map window. */
 enum SmallMapWindowWidgets {
 	SM_WIDGET_CAPTION,           ///< Caption widget.
 	SM_WIDGET_MAP_BORDER,        ///< Border around the smallmap.
 	SM_WIDGET_MAP,               ///< Panel containing the smallmap.
 	SM_WIDGET_LEGEND,            ///< Bottom panel to display smallmap legends.
+	SM_WIDGET_BLANK,
 	SM_WIDGET_ZOOM_IN,           ///< Button to zoom in one step.
 	SM_WIDGET_ZOOM_OUT,          ///< Button to zoom out one step.
 	SM_WIDGET_CONTOUR,           ///< Button to select the contour view (height map).
 	SM_WIDGET_VEHICLES,          ///< Button to select the vehicles view.
 	SM_WIDGET_INDUSTRIES,        ///< Button to select the industries view.
+	SM_WIDGET_LINKSTATS,
 	SM_WIDGET_ROUTES,            ///< Button to select the routes view.
 	SM_WIDGET_VEGETATION,        ///< Button to select the vegetation view.
 	SM_WIDGET_OWNERS,            ///< Button to select the owners view.
 	SM_WIDGET_CENTERMAP,         ///< Button to move smallmap center to main window center.
 	SM_WIDGET_TOGGLETOWNNAME,    ///< Toggle button to display town names.
 	SM_WIDGET_SELECTINDUSTRIES,  ///< Selection widget for the buttons at the industry mode.
-	SM_WIDGET_ENABLEINDUSTRIES,  ///< Button to enable display of all industries.
-	SM_WIDGET_DISABLEINDUSTRIES, ///< Button to disable display of all industries.
+	SM_WIDGET_ENABLE_ALL,        ///< Button to enable display of all industries or link stats.
+	SM_WIDGET_DISABLE_ALL,       ///< Button to disable display of all industries or link stats.
 	SM_WIDGET_SHOW_HEIGHT,       ///< Show heightmap toggle button.
 };
 
 static int _smallmap_industry_count; ///< Number of used industries
 
+static int _smallmap_cargo_count; ///< number of cargos in the link stats legend
+
 /** Macro for ordinary entry of LegendAndColour */
 #define MK(a, b) {a, b, {INVALID_INDUSTRYTYPE}, true, false, false}
 
@@ -157,8 +168,14 @@ static const LegendAndColour _legend_land_owners[] = {
 static LegendAndColour _legend_from_industries[NUM_INDUSTRYTYPES + 1];
 /* For connecting industry type to position in industries list(small map legend) */
 static uint _industry_to_list_pos[NUM_INDUSTRYTYPES];
-/** Show heightmap in industry mode of smallmap window. */
-static bool _smallmap_industry_show_heightmap;
+/** Show heightmap in smallmap window. */
+static bool _smallmap_show_heightmap;
+
+static uint8 _smallmap_link_colours[] = {
+	0x0f, 0xd1, 0xd0, 0x57,
+	0x55, 0x53, 0xbf, 0xbd,
+	0xba, 0xb9, 0xb7, 0xb5
+};
 
 /**
  * Fills an array for the industries legends.
@@ -191,10 +208,36 @@ void BuildIndustriesLegend()
 	_smallmap_industry_count = j;
 }
 
+static LegendAndColour _legend_linkstats[NUM_CARGO + 1];
+
+/**
+ * Populate legend table for the route map view.
+ */
+void BuildLinkStatsLegend()
+{
+	/* Clear the legend */
+	memset(_legend_linkstats, 0, sizeof(_legend_linkstats));
+
+	uint i = 0;
+	for (; i < _sorted_cargo_specs_size; ++i) {
+		const CargoSpec *cs = _sorted_cargo_specs[i];
+
+		_legend_linkstats[i].legend = cs->name;
+		_legend_linkstats[i].colour = cs->legend_colour;
+		_legend_linkstats[i].u.type = cs->Index();
+		_legend_linkstats[i].show_on_map = true;
+	}
+
+	_legend_linkstats[i].end = true;
+
+	_smallmap_cargo_count = i;
+}
+
 static const LegendAndColour * const _legend_table[] = {
 	_legend_land_contours,
 	_legend_vehicles,
 	_legend_from_industries,
+	_legend_linkstats,
 	_legend_routes,
 	_legend_vegetation,
 	_legend_land_owners,
@@ -406,7 +449,7 @@ static inline uint32 GetSmallMapIndustriesPixels(TileIndex tile, TileType t)
 	}
 
 	const SmallMapColourScheme *cs = &_heightmap_schemes[_settings_client.gui.smallmap_land_colour];
-	return ApplyMask(_smallmap_industry_show_heightmap ? cs->height_colours[TileHeight(tile)] : cs->default_colour, &_smallmap_vehicles_andor[t]);
+	return ApplyMask(_smallmap_show_heightmap ? cs->height_colours[TileHeight(tile)] : cs->default_colour, &_smallmap_vehicles_andor[t]);
 }
 
 /**
@@ -442,6 +485,17 @@ static inline uint32 GetSmallMapRoutesPixels(TileIndex tile, TileType t)
 	return ApplyMask(cs->default_colour, &_smallmap_contours_andor[t]);
 }
 
+/**
+ * Return the colour a tile would be displayed with in the small map in mode "link stats".
+ *
+ * @param tile The tile of which we would like to get the colour.
+ * @param t    Effective tile type of the tile (see #GetEffectiveTileType).
+ * @return The colour of tile in the small map in mode "link stats"
+ */
+static inline uint32 GetSmallMapLinkStatsPixels(TileIndex tile, TileType t)
+{
+	return _smallmap_show_heightmap ? GetSmallMapContoursPixels(tile, t) : GetSmallMapRoutesPixels(tile, t);
+}
 
 static const uint32 _vegetation_clear_bits[] = {
 	MKCOLOUR(0x54545454), ///< full grass
@@ -514,6 +568,22 @@ static const byte _vehicle_type_colours[6] = {
 };
 
 
+void DrawVertex(int x, int y, int size, int colour, int boder_colour)
+{
+	size--;
+	int w1 = size / 2;
+	int w2 = size / 2 + size % 2;
+
+	GfxFillRect(x - w1, y - w1, x + w2, y + w2, colour);
+
+	w1++;
+	w2++;
+	GfxDrawLine(x - w1, y - w1, x + w2, y - w1, boder_colour);
+	GfxDrawLine(x - w1, y + w2, x + w2, y + w2, boder_colour);
+	GfxDrawLine(x - w1, y - w1, x - w1, y + w2, boder_colour);
+	GfxDrawLine(x + w2, y - w1, x + w2, y + w2, boder_colour);
+}
+
 /** Class managing the smallmap window. */
 class SmallMapWindow : public Window {
 	/** Types of legends in the #SM_WIDGET_LEGEND widget. */
@@ -521,6 +591,7 @@ class SmallMapWindow : public Window {
 		SMT_CONTOUR,
 		SMT_VEHICLES,
 		SMT_INDUSTRY,
+		SMT_LINKSTATS,
 		SMT_ROUTES,
 		SMT_VEGETATION,
 		SMT_OWNER,
@@ -563,6 +634,76 @@ class SmallMapWindow : public Window {
 	uint min_number_of_fixed_rows; ///< Minimal number of rows in the legends for the fixed layouts only (all except #SMT_INDUSTRY).
 	uint column_width;             ///< Width of a column in the #SM_WIDGET_LEGEND widget.
 
+	bool HasButtons()
+	{
+		return this->map_type == SMT_INDUSTRY || this->map_type == SMT_LINKSTATS;
+	}
+
+	Point cursor;
+
+	struct BaseCargoDetail {
+		BaseCargoDetail()
+		{
+			this->Clear();
+		}
+
+		void Clear()
+		{
+			this->capacity = this->usage = this->planned = 0;
+		}
+
+		uint capacity;
+		uint usage;
+		uint planned;
+	};
+
+	struct CargoDetail : public BaseCargoDetail {
+		CargoDetail(const LegendAndColour *c, const LinkStat &ls, const FlowStat &fs) : legend(c)
+		{
+			this->AddLink(ls, fs);
+		}
+
+		void AddLink(const LinkStat &orig_link, const FlowStat &orig_flow)
+		{
+			this->capacity += orig_link.Capacity();
+			this->usage += orig_link.Usage();
+			this->planned += orig_flow.Planned();
+		}
+
+		const LegendAndColour *legend;
+	};
+
+	typedef std::vector<CargoDetail> StatVector;
+
+	struct LinkDetails {
+		LinkDetails() {this->Clear();}
+
+		StationID sta;
+		StationID stb;
+		StatVector a_to_b;
+		StatVector b_to_a;
+
+		void Clear()
+		{
+			this->sta = INVALID_STATION;
+			this->stb = INVALID_STATION;
+			this->a_to_b.clear();
+			this->b_to_a.clear();
+		}
+
+		bool Empty() const
+		{
+			return this->sta == INVALID_STATION;
+		}
+	};
+
+	/**
+	 * those are detected while drawing the links and used when drawing
+	 * the legend. They don't represent game state.
+	 */
+	mutable LinkDetails link_details;
+	mutable StationID supply_details;
+
 	int32 scroll_x;  ///< Horizontal world coordinate of the base tile left of the top-left corner of the smallmap display.
 	int32 scroll_y;  ///< Vertical world coordinate of the base tile left of the top-left corner of the smallmap display.
 	int32 subscroll; ///< Number of pixels (0..3) between the right end of the base tile and the pixel at the top-left corner of the smallmap display.
@@ -763,6 +904,9 @@ class SmallMapWindow : public Window {
 			case SMT_OWNER:
 				return GetSmallMapOwnerPixels(tile, et);
 
+			case SMT_LINKSTATS:
+				return GetSmallMapLinkStatsPixels(tile, et);
+
 			default: NOT_REACHED();
 		}
 	}
@@ -858,6 +1002,338 @@ class SmallMapWindow : public Window {
 		}
 	}
 
+	FORCEINLINE Point GetStationMiddle(const Station *st) const
+	{
+		int x = (st->rect.right + st->rect.left + 1) / 2;
+		int y = (st->rect.bottom + st->rect.top + 1) / 2;
+		Point ret = this->RemapTile(x, y);
+		ret.x -= 3 + this->subscroll;
+		if (this->zoom < 0) {
+			/* add half a tile if width or height is odd */
+			if (((st->rect.bottom - st->rect.top) & 1) == 0) {
+				Point offset = RemapCoords(0, -this->zoom / 2, 0);
+				ret.x += offset.x;
+				ret.y += offset.y;
+			}
+			if (((st->rect.right - st->rect.left) & 1) == 0) {
+				Point offset = RemapCoords(-this->zoom / 2, 0, 0);
+				ret.x += offset.x;
+				ret.y += offset.y;
+			}
+		}
+		return ret;
+	}
+
+	StationID DrawStationDots() const
+	{
+		const Station *supply_details = NULL;
+
+		const Station *st;
+		FOR_ALL_STATIONS(st) {
+			if ((st->owner != _local_company && Company::IsValidID(st->owner)) ||
+					st->rect.IsEmpty()) continue;
+
+			Point pt = GetStationMiddle(st);
+
+			if (supply_details == NULL && CheckStationSelected(&pt)) {
+				supply_details = st;
+			}
+
+			/* Add up cargo supplied for each selected cargo type */
+			uint q = 0;
+			int colour = 0;
+			int numCargos = 0;
+			for (int i = 0; i < _smallmap_cargo_count; ++i) {
+				const LegendAndColour &tbl = _legend_table[this->map_type][i];
+				if (!tbl.show_on_map && supply_details != st) continue;
+				uint supply = st->goods[tbl.u.type].supply;
+				if (supply > 0) {
+					q += supply;
+					colour += tbl.colour;
+					numCargos++;
+				}
+			}
+			if (numCargos > 1) colour /= numCargos;
+
+			uint r = 1;
+			if (q >= 20) r++;
+			if (q >= 90) r++;
+			if (q >= 160) r++;
+
+			DrawVertex(pt.x, pt.y, r, colour, _colour_gradient[COLOUR_GREY][supply_details == st ? 3 : 1]);
+		}
+		return (supply_details == NULL) ? INVALID_STATION : supply_details->index;
+	}
+
+	class LinkLineDrawer {
+
+	public:
+
+		LinkLineDrawer(const SmallMapWindow *w) : window(w), highlight(false)
+		{
+			this->pta.x = this->pta.y = this->ptb.x = this->ptb.y = -1;
+		}
+
+		LinkDetails DrawLinks()
+		{
+			this->link_details.Clear();
+			std::set<StationID> seen_stations;
+			std::set<std::pair<StationID, StationID> > seen_links;
+
+			const Station *sta;
+			FOR_ALL_STATIONS(sta) {
+				if (sta->owner != _local_company && Company::IsValidID(sta->owner)) continue;
+				for (int i = 0; i < _smallmap_cargo_count; ++i) {
+					const LegendAndColour &tbl = _legend_table[window->map_type][i];
+					if (!tbl.show_on_map) continue;
+
+					CargoID c = tbl.u.type;
+					const LinkStatMap &links = sta->goods[c].link_stats;
+					for (LinkStatMap::const_iterator i = links.begin(); i != links.end(); ++i) {
+						StationID from = sta->index;
+						StationID to = i->first;
+						if (Station::IsValidID(to) && seen_stations.find(to) == seen_stations.end()) {
+							const Station *stb = Station::Get(to);
+
+							if (stb->owner != _local_company && Company::IsValidID(stb->owner)) continue;
+							if (sta->rect.IsEmpty() || stb->rect.IsEmpty()) continue;
+							if (seen_links.find(std::make_pair(to, from)) != seen_links.end()) continue;
+
+							this->pta = this->window->GetStationMiddle(sta);
+							this->ptb = this->window->GetStationMiddle(stb);
+							if (!this->IsLinkVisible()) continue;
+
+							this->DrawForwBackLinks(sta->index, stb->index);
+							seen_stations.insert(to);
+						}
+						seen_links.insert(std::make_pair(from, to));
+					}
+				}
+				seen_stations.clear();
+			}
+			return this->link_details;
+		}
+
+	protected:
+
+		Point pta, ptb;
+		BaseCargoDetail forward, backward;
+		LinkDetails link_details;
+		const SmallMapWindow *window;
+		bool highlight;
+
+		FORCEINLINE bool IsLinkVisible()
+		{
+			const NWidgetBase *wi = this->window->GetWidget<NWidgetCore>(SM_WIDGET_MAP);
+			return !((this->pta.x < 0 && this->ptb.x < 0) ||
+					(this->pta.y < 0 && this->ptb.y < 0) ||
+					(this->pta.x > (int)wi->current_x && this->ptb.x > (int)wi->current_x) ||
+					(this->pta.y > (int)wi->current_y && this->ptb.y > (int)wi->current_y));
+		}
+
+		void DrawLink(StationID sta, StationID stb, bool backward)
+		{
+			bool highlight_empty = this->link_details.Empty();
+			bool highlight =
+					(sta == this->link_details.sta && stb == this->link_details.stb) ||
+					(highlight_empty && window->CheckLinkSelected(&this->pta, &this->ptb));
+			if (highlight_empty && highlight) {
+				this->link_details.sta = sta;
+				this->link_details.stb = stb;
+			}
+
+			bool backward_empty = this->link_details.b_to_a.empty();
+			bool highlight_backward = (sta == this->link_details.stb && stb == this->link_details.sta);
+
+			if (highlight || highlight_backward) {
+				this->highlight = true;
+			}
+
+			for (int i = 0; i < _smallmap_cargo_count; ++i) {
+				const LegendAndColour &cargo_entry = _legend_table[this->window->map_type][i];
+				CargoID cargo = cargo_entry.u.type;
+				if (cargo_entry.show_on_map || highlight || highlight_backward) {
+					GoodsEntry &ge = Station::Get(sta)->goods[cargo];
+					FlowStat sum_flows = ge.GetSumFlowVia(stb);
+					const LinkStatMap &ls_map = ge.link_stats;
+					LinkStatMap::const_iterator i = ls_map.find(stb);
+					if (i != ls_map.end()) {
+						const LinkStat &link_stat = i->second;
+						this->AddLink(link_stat, sum_flows, backward ? this->backward : this->forward);
+						if (highlight_empty && highlight) {
+							this->link_details.a_to_b.push_back(CargoDetail(&cargo_entry, link_stat, sum_flows));
+						} else if (backward_empty && highlight_backward) {
+							this->link_details.b_to_a.push_back(CargoDetail(&cargo_entry, link_stat, sum_flows));
+						}
+					}
+				}
+			}
+		}
+
+		void AddLink(const LinkStat &orig_link, const FlowStat &orig_flow, BaseCargoDetail &cargo)
+		{
+			uint new_cap = orig_link.Capacity();
+			uint new_usg = orig_link.Usage();
+			uint new_plan = orig_flow.Planned();
+
+			if (cargo.capacity == 0 ||
+					max(cargo.usage, cargo.planned) * 8 / (cargo.capacity + 1) < max(new_usg, new_plan) * 8 / (new_cap + 1)) {
+				cargo.capacity = new_cap;
+				cargo.usage = new_usg;
+				cargo.planned = new_plan;
+			}
+		}
+
+		void DrawForwBackLinks(StationID sta, StationID stb)
+		{
+			this->DrawLink(sta, stb, false);
+			this->DrawLink(stb, sta, true);
+			this->DrawContent();
+			this->highlight = false;
+			this->forward.Clear();
+			this->backward.Clear();
+		}
+
+		void DrawContent()
+		{
+			GfxDrawLine(this->pta.x, this->pta.y, this->ptb.x, this->ptb.y, _colour_gradient[COLOUR_GREY][1]);
+
+			int direction_y = (this->pta.x < this->ptb.x ? 1 : -1);
+			int direction_x = (this->pta.y > this->ptb.y ? 1 : -1);;
+
+			if (this->forward.capacity > 0) {
+				uint usage_or_plan = min(this->forward.capacity * 2, max(this->forward.usage, this->forward.planned));
+				int colour = _smallmap_link_colours[usage_or_plan * lengthof(_smallmap_link_colours) / (this->forward.capacity * 2 + 1)];
+				GfxDrawLine(this->pta.x + direction_x, this->pta.y, this->ptb.x + direction_x, this->ptb.y, colour);
+				GfxDrawLine(this->pta.x, this->pta.y + direction_y, this->ptb.x, this->ptb.y + direction_y, colour);
+			}
+
+			if (this->backward.capacity > 0) {
+				uint usage_or_plan = min(this->backward.capacity * 2, max(this->backward.usage, this->backward.planned));
+				int colour = _smallmap_link_colours[usage_or_plan * lengthof(_smallmap_link_colours) / (this->backward.capacity * 2 + 1)];
+				GfxDrawLine(this->pta.x - direction_x, this->pta.y, this->ptb.x - direction_x, this->ptb.y, colour);
+				GfxDrawLine(this->pta.x, this->pta.y - direction_y, this->ptb.x, this->ptb.y - direction_y, colour);
+			}
+		}
+	};
+
+	static const uint MORE_SPACE_NEEDED = 0x1000;
+
+	uint DrawLinkDetails(StatVector &details, uint x, uint y, uint right, uint bottom) const
+	{
+		uint x_orig = x;
+		SetDParam(0, 9999);
+		static uint entry_width = LEGEND_BLOB_WIDTH +
+				GetStringBoundingBox(STR_ABBREV_PASSENGERS).width +
+				GetStringBoundingBox(STR_SMALLMAP_LINK_CAPACITY).width +
+				GetStringBoundingBox(STR_SMALLMAP_LINK_USAGE).width +
+				GetStringBoundingBox(STR_SMALLMAP_LINK_PLANNED).width;
+		uint entries_per_row = (right - x_orig) / entry_width;
+		if (details.empty()) {
+			DrawString(x, x + entry_width, y, STR_TINY_NOTHING, TC_BLACK);
+			return y + FONT_HEIGHT_SMALL;
+		}
+		for (uint i = 0; i < details.size(); ++i) {
+			CargoDetail &detail = details[i];
+			if (x + entry_width >= right) {
+				x = x_orig;
+				y += FONT_HEIGHT_SMALL;
+				if (y + 2 * FONT_HEIGHT_SMALL > bottom && details.size() - i > entries_per_row) {
+					return y | MORE_SPACE_NEEDED;
+				}
+			}
+			uint x_next = x + entry_width;
+			GfxFillRect(x, y + 1, x + LEGEND_BLOB_WIDTH, y + FONT_HEIGHT_SMALL - 1, 0); // outer border of the legend colour
+			GfxFillRect(x + 1, y + 2, x + LEGEND_BLOB_WIDTH - 1, y + FONT_HEIGHT_SMALL - 2, detail.legend->colour); // legend colour
+			x += LEGEND_BLOB_WIDTH + WD_FRAMERECT_LEFT;
+
+			SetDParam(0, CargoSpec::Get(detail.legend->u.type)->abbrev);
+			TextColour tc = detail.legend->show_on_map ? TC_BLACK : TC_GREY;
+			x = DrawString(x, x_next - 1, y, STR_SMALLMAP_LINK, tc);
+			SetDParam(0, detail.capacity);
+			x = DrawString(x, x_next - 1, y, STR_SMALLMAP_LINK_CAPACITY, tc);
+			SetDParam(0, detail.usage);
+			x = DrawString(x, x_next - 1, y, STR_SMALLMAP_LINK_USAGE, tc);
+			SetDParam(0, detail.planned);
+			x = DrawString(x, x_next - 1, y, STR_SMALLMAP_LINK_PLANNED, tc);
+			x = x_next;
+		}
+		return y + FONT_HEIGHT_SMALL;
+	}
+
+	uint DrawLinkDetailCaption(uint x, uint y, uint right, StationID sta, StationID stb) const
+	{
+		SetDParam(0, sta);
+		SetDParam(1, stb);
+		static uint height = GetStringBoundingBox(STR_SMALLMAP_LINK_CAPTION).height;
+		DrawString(x, right - 1, y, STR_SMALLMAP_LINK_CAPTION, TC_BLACK);
+		y += height;
+		return y;
+	}
+
+	void DrawLinkDetails(uint x, uint y, uint right, uint bottom) const
+	{
+		y = DrawLinkDetailCaption(x, y, right, this->link_details.sta, this->link_details.stb);
+		if (y + 2 * FONT_HEIGHT_SMALL > bottom) {
+			DrawString(x, right, y, "...", TC_BLACK);
+			return;
+		}
+		y = DrawLinkDetails(this->link_details.a_to_b, x, y, right, bottom);
+		if (y + 3 * FONT_HEIGHT_SMALL > bottom) {
+			/* caption takes more space -> 3 * row height */
+			DrawString(x, right, y, "...", TC_BLACK);
+			return;
+		}
+		y = DrawLinkDetailCaption(x, y + 2, right, this->link_details.stb, this->link_details.sta);
+		if (y + 2 * FONT_HEIGHT_SMALL > bottom) {
+			DrawString(x, right, y, "...", TC_BLACK);
+			return;
+		}
+		y = DrawLinkDetails(this->link_details.b_to_a, x, y, right, bottom);
+		if (y & MORE_SPACE_NEEDED) {
+			/* only draw "..." if more entries would have been drawn */
+			DrawString(x, right, y ^ MORE_SPACE_NEEDED, "...", TC_BLACK);
+			return;
+		}
+	}
+
+	void DrawSupplyDetails(uint x, uint y_org, uint bottom) const
+	{
+		const Station *st = Station::GetIfValid(this->supply_details);
+		if (st == NULL) return;
+		SetDParam(0, this->supply_details);
+		static uint height = GetStringBoundingBox(STR_SMALLMAP_SUPPLY_CAPTION).height;
+		DrawString(x, x + 2 * this->column_width - 1, y_org, STR_SMALLMAP_SUPPLY_CAPTION, TC_BLACK);
+		y_org += height;
+		uint y = y_org;
+		for (int i = 0; i < _smallmap_cargo_count; ++i) {
+			if (y + FONT_HEIGHT_SMALL - 1 >= bottom) {
+				/* Column break needed, continue at top, SD_LEGEND_COLUMN_WIDTH pixels
+				 * (one "row") to the right. */
+				x += this->column_width;
+				y = y_org;
+			}
+
+			const LegendAndColour &tbl = _legend_table[this->map_type][i];
+
+			CargoID c = tbl.u.type;
+			uint supply = st->goods[c].supply;
+			if (supply > 0) {
+				TextColour textcol = TC_BLACK;
+				if (tbl.show_on_map) {
+					GfxFillRect(x, y + 1, x + LEGEND_BLOB_WIDTH, y + FONT_HEIGHT_SMALL - 1, 0); // outer border of the legend colour
+				} else {
+					textcol = TC_GREY;
+				}
+				SetDParam(0, c);
+				SetDParam(1, supply);
+				DrawString(x + LEGEND_BLOB_WIDTH + WD_FRAMERECT_LEFT, x + this->column_width - 1, y, STR_SMALLMAP_SUPPLY, textcol);
+				GfxFillRect(x + 1, y + 2, x + LEGEND_BLOB_WIDTH - 1, y + FONT_HEIGHT_SMALL - 2, tbl.colour); // legend colour
+				y += FONT_HEIGHT_SMALL;
+			}
+		}
+	}
+
 	/**
 	 * Adds town names to the smallmap.
 	 * @param dpi the part of the smallmap to be drawn into
@@ -1007,6 +1483,13 @@ class SmallMapWindow : public Window {
 		/* Draw vehicles */
 		if (this->map_type == SMT_CONTOUR || this->map_type == SMT_VEHICLES) this->DrawVehicles(dpi, blitter);
 
+		if (this->map_type == SMT_LINKSTATS && _game_mode == GM_NORMAL) {
+			LinkLineDrawer lines(this);
+			this->link_details = lines.DrawLinks();
+
+			this->supply_details = DrawStationDots();
+		}
+
 		/* Draw town names */
 		if (this->show_towns) this->DrawTowns(dpi);
 
@@ -1016,6 +1499,37 @@ class SmallMapWindow : public Window {
 		_cur_dpi = old_dpi;
 	}
 
+	bool CheckStationSelected(Point *pt) const
+	{
+		return abs(this->cursor.x - pt->x) < 7 && abs(this->cursor.y - pt->y) < 7;
+	}
+
+	bool CheckLinkSelected(Point *pta, Point *ptb) const
+	{
+		if (this->cursor.x == -1 && this->cursor.y == -1) return false;
+		if (CheckStationSelected(pta) || CheckStationSelected(ptb)) return false;
+		if (pta->x > ptb->x) Swap(pta, ptb);
+		int minx = min(pta->x, ptb->x);
+		int maxx = max(pta->x, ptb->x);
+		int miny = min(pta->y, ptb->y);
+		int maxy = max(pta->y, ptb->y);
+		if (!IsInsideMM(cursor.x, minx - 3, maxx + 3) || !IsInsideMM(cursor.y, miny - 3, maxy + 3)) {
+			return false;
+		}
+
+		if (pta->x == ptb->x || ptb->y == pta->y) {
+			return true;
+		} else {
+			int incliney = (ptb->y - pta->y);
+			int inclinex = (ptb->x - pta->x);
+			int diff = (cursor.x - minx) * incliney / inclinex - (cursor.y - miny);
+			if (incliney < 0) {
+				diff += maxy - miny;
+			}
+			return abs(diff) < 4;
+		}
+	}
+
 	/**
 	 * recalculate which vehicles are visible and their positions.
 	 */
@@ -1043,17 +1557,26 @@ class SmallMapWindow : public Window {
 	}
 
 public:
-	SmallMapWindow(const WindowDesc *desc, int window_number) : Window(), refresh(FORCE_REFRESH_PERIOD)
+	SmallMapWindow(const WindowDesc *desc, int window_number) : Window(), supply_details(INVALID_STATION), refresh(FORCE_REFRESH_PERIOD)
 	{
+		this->cursor.x = -1;
+		this->cursor.y = -1;
 		this->InitNested(desc, window_number);
+		if (_smallmap_cargo_count == 0) {
+			this->DisableWidget(SM_WIDGET_LINKSTATS);
+			if (this->map_type == SMT_LINKSTATS) {
+				this->map_type = SMT_CONTOUR;
+			}
+		}
+
 		this->LowerWidget(this->map_type + SM_WIDGET_CONTOUR);
 
-		_smallmap_industry_show_heightmap = false;
+		_smallmap_show_heightmap = (this->map_type != SMT_INDUSTRY);
 		BuildLandLegend();
-		this->SetWidgetLoweredState(SM_WIDGET_SHOW_HEIGHT, _smallmap_industry_show_heightmap);
+		this->SetWidgetLoweredState(SM_WIDGET_SHOW_HEIGHT, _smallmap_show_heightmap);
 
 		this->SetWidgetLoweredState(SM_WIDGET_TOGGLETOWNNAME, this->show_towns);
-		this->GetWidget<NWidgetStacked>(SM_WIDGET_SELECTINDUSTRIES)->SetDisplayedPlane(this->map_type != SMT_INDUSTRY);
+		this->GetWidget<NWidgetStacked>(SM_WIDGET_SELECTINDUSTRIES)->SetDisplayedPlane(this->map_type != SMT_INDUSTRY && this->map_type != SMT_LINKSTATS);
 
 		this->SetZoomLevel(ZLC_INITIALIZE, NULL);
 		this->SmallMapCenterOnCurrentPos();
@@ -1065,8 +1588,7 @@ public:
 	 */
 	inline uint GetMaxLegendHeight() const
 	{
-		uint num_rows = max(this->min_number_of_fixed_rows, CeilDiv(_smallmap_industry_count, this->min_number_of_columns));
-		return WD_FRAMERECT_TOP + WD_FRAMERECT_BOTTOM + num_rows * FONT_HEIGHT_SMALL;
+		return WD_FRAMERECT_TOP + WD_FRAMERECT_BOTTOM + this->GetMaxNumberRowsLegend(this->min_number_of_columns) * FONT_HEIGHT_SMALL;
 	}
 
 	/**
@@ -1094,8 +1616,7 @@ public:
 	uint GetLegendHeight(uint width) const
 	{
 		uint num_columns = this->GetNumberColumnsLegend(width);
-		uint num_rows = max(this->min_number_of_fixed_rows, CeilDiv(_smallmap_industry_count, num_columns));
-		return WD_FRAMERECT_TOP + WD_FRAMERECT_BOTTOM + num_rows * FONT_HEIGHT_SMALL;
+		return WD_FRAMERECT_TOP + WD_FRAMERECT_BOTTOM + this->GetMaxNumberRowsLegend(num_columns) * FONT_HEIGHT_SMALL;
 	}
 
 	virtual void SetStringParameters(int widget) const
@@ -1117,10 +1638,10 @@ public:
 			uint num_columns = 1;
 			for (const LegendAndColour *tbl = _legend_table[i]; !tbl->end; ++tbl) {
 				StringID str;
-				if (i == SMT_INDUSTRY) {
+				if (i == SMT_INDUSTRY || i == SMT_LINKSTATS) {
 					SetDParam(0, tbl->legend);
 					SetDParam(1, IndustryPool::MAX_SIZE);
-					str = STR_SMALLMAP_INDUSTRY;
+					str = (i == SMT_INDUSTRY) ? STR_SMALLMAP_INDUSTRY : STR_SMALLMAP_LINKSTATS_LEGEND;
 				} else {
 					if (tbl->col_break) {
 						this->min_number_of_fixed_rows = max(this->min_number_of_fixed_rows, height);
@@ -1151,58 +1672,131 @@ public:
 			}
 
 			case SM_WIDGET_LEGEND: {
-				uint columns = this->GetNumberColumnsLegend(r.right - r.left + 1);
-				uint number_of_rows = max(this->map_type == SMT_INDUSTRY ? CeilDiv(_smallmap_industry_count, columns) : 0, this->min_number_of_fixed_rows);
-				bool rtl = _current_text_dir == TD_RTL;
-				uint y_org = r.top + WD_FRAMERECT_TOP;
-				uint x = rtl ? r.right - this->column_width - WD_FRAMERECT_RIGHT : r.left + WD_FRAMERECT_LEFT;
-				uint y = y_org;
-				uint i = 0; // Row counter for industry legend.
-				uint row_height = FONT_HEIGHT_SMALL;
-
-				uint text_left  = rtl ? 0 : LEGEND_BLOB_WIDTH + WD_FRAMERECT_LEFT;
-				uint text_right = this->column_width - 1 - (rtl ? LEGEND_BLOB_WIDTH + WD_FRAMERECT_RIGHT : 0);
-				uint blob_left  = rtl ? this->column_width - 1 - LEGEND_BLOB_WIDTH : 0;
-				uint blob_right = rtl ? this->column_width - 1 : LEGEND_BLOB_WIDTH;
-
-				for (const LegendAndColour *tbl = _legend_table[this->map_type]; !tbl->end; ++tbl) {
-					if (tbl->col_break || (this->map_type == SMT_INDUSTRY && i++ >= number_of_rows)) {
-						/* Column break needed, continue at top, COLUMN_WIDTH pixels
-						 * (one "row") to the right. */
-						x += rtl ? -(int)this->column_width : this->column_width;
-						y = y_org;
-						i = 1;
-					}
+				DrawLegend(r);
+			} break;
+		}
+	}
 
-					if (this->map_type == SMT_INDUSTRY) {
+	uint GetNumberRowsLegend(uint columns) const
+	{
+		uint number_of_rows = this->min_number_of_fixed_rows;
+		if (this->map_type == SMT_INDUSTRY) {
+			number_of_rows = max(number_of_rows, (_smallmap_industry_count + columns - 1) / columns);
+		} else if (this->map_type == SMT_LINKSTATS) {
+			number_of_rows = max(number_of_rows, (_smallmap_cargo_count + columns - 2) / (columns - 1));
+		}
+		return number_of_rows;
+	}
+
+	uint GetMaxNumberRowsLegend(uint columns) const
+	{
+		uint number_of_rows = this->min_number_of_fixed_rows;
+		number_of_rows = max(number_of_rows, CeilDiv(_smallmap_industry_count, columns));
+		number_of_rows = max(number_of_rows, CeilDiv(_smallmap_cargo_count, (columns - 1)));
+		return number_of_rows;
+	}
+
+	void DrawLegend(const Rect &r) const
+	{
+		uint y_org = r.top + WD_FRAMERECT_TOP;
+		uint x = r.left + WD_FRAMERECT_LEFT;
+		if (this->supply_details != INVALID_STATION) {
+			this->DrawSupplyDetails(x, y_org, r.bottom - WD_FRAMERECT_BOTTOM);
+		} else if (!this->link_details.Empty()) {
+			this->DrawLinkDetails(x, y_org, r.right - WD_FRAMERECT_RIGHT, r.bottom - WD_FRAMERECT_BOTTOM);
+		} else {
+			uint columns = this->GetNumberColumnsLegend(r.right - r.left + 1);
+
+			uint number_of_rows = this->GetNumberRowsLegend(columns);
+
+			bool rtl = _current_text_dir == TD_RTL;
+			uint y_org = r.top + WD_FRAMERECT_TOP;
+			uint x = rtl ? r.right - this->column_width - WD_FRAMERECT_RIGHT : r.left + WD_FRAMERECT_LEFT;
+			uint y = y_org;
+			uint i = 0; // Row counter for industry legend.
+			uint row_height = FONT_HEIGHT_SMALL;
+
+			uint text_left  = rtl ? 0 : LEGEND_BLOB_WIDTH + WD_FRAMERECT_LEFT;
+			uint text_right = this->column_width - 1 - (rtl ? LEGEND_BLOB_WIDTH + WD_FRAMERECT_RIGHT : 0);
+			uint blob_left  = rtl ? this->column_width - 1 - LEGEND_BLOB_WIDTH : 0;
+			uint blob_right = rtl ? this->column_width - 1 : LEGEND_BLOB_WIDTH;
+
+			StringID string = (this->map_type == SMT_INDUSTRY) ? STR_SMALLMAP_INDUSTRY : STR_SMALLMAP_LINKSTATS_LEGEND;
+
+			for (const LegendAndColour *tbl = _legend_table[this->map_type]; !tbl->end; ++tbl) {
+				if (tbl->col_break || ((this->map_type == SMT_INDUSTRY || this->map_type == SMT_LINKSTATS) && i++ >= number_of_rows)) {
+					/* Column break needed, continue at top, COLUMN_WIDTH pixels
+					 * (one "row") to the right. */
+					x += rtl ? -(int)this->column_width : this->column_width;
+					y = y_org;
+					i = 1;
+				}
+
+				switch(this->map_type) {
+					case SMT_INDUSTRY:
 						/* Industry name must be formatted, since it's not in tiny font in the specs.
 						 * So, draw with a parameter and use the STR_SMALLMAP_INDUSTRY string, which is tiny font */
-						SetDParam(0, tbl->legend);
 						SetDParam(1, Industry::GetIndustryTypeCount(tbl->u.type));
+					case SMT_LINKSTATS:
+						SetDParam(0, tbl->legend);
 						if (!tbl->show_on_map) {
 							/* Simply draw the string, not the black border of the legend colour.
 							 * This will enforce the idea of the disabled item */
-							DrawString(x + text_left, x + text_right, y, STR_SMALLMAP_INDUSTRY, TC_GREY);
+							DrawString(x + text_left, x + text_right, y, string, TC_GREY);
 						} else {
-							DrawString(x + text_left, x + text_right, y, STR_SMALLMAP_INDUSTRY, TC_BLACK);
-							GfxFillRect(x + blob_left, y + 1, x + blob_right, y + row_height - 1, 0); // Outer border of the legend colour
+							DrawString(x + text_left, x + text_right, y, string, TC_BLACK);
+							GfxFillRect(x + blob_left, y + 1, x + blob_right, y + row_height - 1, 0); // outer border of the legend colour
 						}
-					} else {
+						break;
+					default:
 						if (this->map_type == SMT_CONTOUR) SetDParam(0, tbl->u.height * TILE_HEIGHT_STEP);
 
 						/* Anything that is not an industry is using normal process */
 						GfxFillRect(x + blob_left, y + 1, x + blob_right, y + row_height - 1, 0);
 						DrawString(x + text_left, x + text_right, y, tbl->legend);
-					}
-					GfxFillRect(x + blob_left + 1, y + 2, x + blob_right - 1, y + row_height - 2, tbl->colour); // Legend colour
-
-					y += row_height;
 				}
+				GfxFillRect(x + blob_left + 1, y + 2, x + blob_right - 1, y + row_height - 2, tbl->colour); // Legend colour
+
+				y += row_height;
 			}
 		}
 	}
 
 	/**
+	 * Select and toggle a legend item. When CTRL is pressed, disable all other
+	 * items in the group defined by begin_legend_item and end_legend_item and
+	 * keep the clicked one enabled even if it was already enabled before. If
+	 * the other items in the group are all disabled already and CTRL is pressed
+	 * enable them instead.
+	 * @param click_pos the index of the item being selected
+	 * @param legend the legend from which we select
+	 * @param end_legend_item index one past the last item in the group to be inverted
+	 * @param begin_legend_item index of the first item in the group to be inverted
+	 */
+	void SelectLegendItem(int click_pos, LegendAndColour *legend, int end_legend_item, int begin_legend_item = 0)
+	{
+		if (_ctrl_pressed) {
+			/* Disable all, except the clicked one */
+			bool changes = false;
+			for (int i = begin_legend_item; i != end_legend_item; i++) {
+				bool new_state = i == click_pos;
+				if (legend[i].show_on_map != new_state) {
+					changes = true;
+					legend[i].show_on_map = new_state;
+				}
+			}
+			if (!changes) {
+				/* Nothing changed? Then show all (again). */
+				for (int i = begin_legend_item; i != end_legend_item; i++) {
+					legend[i].show_on_map = true;
+				}
+			}
+		} else {
+			legend[click_pos].show_on_map = !legend[click_pos].show_on_map;
+		}
+	}
+
+	/*
 	 * Select a new map type.
 	 * @param map_type New map type.
 	 */
@@ -1213,7 +1807,7 @@ public:
 		this->LowerWidget(this->map_type + SM_WIDGET_CONTOUR);
 
 		/* Hide Enable all/Disable all buttons if is not industry type small map */
-		this->GetWidget<NWidgetStacked>(SM_WIDGET_SELECTINDUSTRIES)->SetDisplayedPlane(this->map_type != SMT_INDUSTRY);
+		this->GetWidget<NWidgetStacked>(SM_WIDGET_SELECTINDUSTRIES)->SetDisplayedPlane(this->map_type != SMT_INDUSTRY && this->map_type != SMT_LINKSTATS);
 
 		this->SetDirty();
 	}
@@ -1263,6 +1857,7 @@ public:
 			case SM_WIDGET_CONTOUR:    // Show land contours
 			case SM_WIDGET_VEHICLES:   // Show vehicles
 			case SM_WIDGET_INDUSTRIES: // Show industries
+			case SM_WIDGET_LINKSTATS:  // Show route map
 			case SM_WIDGET_ROUTES:     // Show transport routes
 			case SM_WIDGET_VEGETATION: // Show vegetation
 			case SM_WIDGET_OWNERS:     // Show land owners
@@ -1286,12 +1881,19 @@ public:
 
 			case SM_WIDGET_LEGEND: // Legend
 				/* If industry type small map*/
-				if (this->map_type == SMT_INDUSTRY) {
+				if (this->map_type == SMT_INDUSTRY || this->map_type == SMT_LINKSTATS) {
 					/* If click on industries label, find right industry type and enable/disable it */
 					const NWidgetBase *wi = this->GetWidget<NWidgetBase>(SM_WIDGET_LEGEND); // Label panel
 					uint line = (pt.y - wi->pos_y - WD_FRAMERECT_TOP) / FONT_HEIGHT_SMALL;
 					uint columns = this->GetNumberColumnsLegend(wi->current_x);
-					uint number_of_rows = max(CeilDiv(_smallmap_industry_count, columns), this->min_number_of_fixed_rows);
+					uint entry_count = 0;
+					if (this->map_type == SMT_LINKSTATS) {
+						columns--; // one column is reserved for stats legend
+						entry_count = _smallmap_cargo_count;
+					} else {
+						entry_count = _smallmap_industry_count;
+					}
+					uint number_of_rows = max(CeilDiv(entry_count, columns), this->min_number_of_fixed_rows);
 					if (line >= number_of_rows) break;
 
 					bool rtl = _current_text_dir == TD_RTL;
@@ -1300,54 +1902,63 @@ public:
 					uint column = (x - WD_FRAMERECT_LEFT) / this->column_width;
 
 					/* Check if click is on industry label*/
-					int industry_pos = (column * number_of_rows) + line;
-					if (industry_pos < _smallmap_industry_count) {
-						if (_ctrl_pressed) {
-							/* Disable all, except the clicked one */
-							bool changes = false;
-							for (int i = 0; i != _smallmap_industry_count; i++) {
-								bool new_state = i == industry_pos;
-								if (_legend_from_industries[i].show_on_map != new_state) {
-									changes = true;
-									_legend_from_industries[i].show_on_map = new_state;
-								}
-							}
-							if (!changes) {
-								/* Nothing changed? Then show all (again). */
-								for (int i = 0; i != _smallmap_industry_count; i++) {
-									_legend_from_industries[i].show_on_map = true;
-								}
-							}
-						} else {
-							_legend_from_industries[industry_pos].show_on_map = !_legend_from_industries[industry_pos].show_on_map;
+					int click_pos = (column * number_of_rows) + line;
+					if (this->map_type == SMT_INDUSTRY) {
+						if (click_pos < _smallmap_industry_count) {
+							this->SelectLegendItem(click_pos, _legend_from_industries, _smallmap_industry_count);
+						}
+					} else if (this->map_type == SMT_LINKSTATS) {
+						if (click_pos < _smallmap_cargo_count) {
+							this->SelectLegendItem(click_pos, _legend_linkstats, _smallmap_cargo_count);
 						}
 					}
 					this->SetDirty();
 				}
 				break;
 
-			case SM_WIDGET_ENABLEINDUSTRIES: // Enable all industries
-				for (int i = 0; i != _smallmap_industry_count; i++) {
-					_legend_from_industries[i].show_on_map = true;
+			case SM_WIDGET_ENABLE_ALL: { // Enable all items
+				LegendAndColour *tbl = (this->map_type == SMT_INDUSTRY) ? _legend_from_industries : _legend_linkstats;
+				for (; !tbl->end; ++tbl) {
+					tbl->show_on_map = true;
 				}
 				this->SetDirty();
 				break;
+			}
 
-			case SM_WIDGET_DISABLEINDUSTRIES: // Disable all industries
-				for (int i = 0; i != _smallmap_industry_count; i++) {
-					_legend_from_industries[i].show_on_map = false;
+			case SM_WIDGET_DISABLE_ALL: { // Disable all items
+				LegendAndColour *tbl = (this->map_type == SMT_INDUSTRY) ? _legend_from_industries : _legend_linkstats;
+				for (; !tbl->end; ++tbl) {
+					tbl->show_on_map = false;
 				}
 				this->SetDirty();
 				break;
+			}
 
 			case SM_WIDGET_SHOW_HEIGHT: // Enable/disable showing of heightmap.
-				_smallmap_industry_show_heightmap = !_smallmap_industry_show_heightmap;
-				this->SetWidgetLoweredState(SM_WIDGET_SHOW_HEIGHT, _smallmap_industry_show_heightmap);
+				_smallmap_show_heightmap = !_smallmap_show_heightmap;
+				this->SetWidgetLoweredState(SM_WIDGET_SHOW_HEIGHT, _smallmap_show_heightmap);
 				this->SetDirty();
 				break;
 		}
 	}
 
+	virtual void OnMouseOver(Point pt, int widget)
+	{
+		static Point invalid = {-1, -1};
+		if (widget == SM_WIDGET_MAP) {
+			const NWidgetBase *wid = this->GetWidget<NWidgetBase>(SM_WIDGET_MAP);
+			pt.x -= wid->pos_x;
+			pt.y -= wid->pos_y;
+			if (pt.x != cursor.x || pt.y != cursor.y) {
+				this->refresh = 1;
+				cursor = pt;
+			}
+		} else {
+			cursor = invalid;
+		}
+	}
+
+
 	/**
 	 * Notifications for the smallmap window.
 	 * - data = 0: Displayed industries at the industry chain window have changed.
@@ -1457,6 +2068,8 @@ public:
 		this->SetNewScroll(sxy.x, sxy.y, sub);
 		this->SetDirty();
 	}
+
+	uint ColumnWidth() const {return column_width;}
 };
 
 SmallMapWindow::SmallMapType SmallMapWindow::map_type = SMT_CONTOUR;
@@ -1554,6 +2167,8 @@ static const NWidgetPart _nested_smallmap_bar[] = {
 							SetDataTip(SPR_IMG_ZOOMIN, STR_TOOLBAR_TOOLTIP_ZOOM_THE_VIEW_IN), SetFill(1, 1),
 					NWidget(WWT_PUSHIMGBTN, COLOUR_BROWN, SM_WIDGET_CENTERMAP),
 							SetDataTip(SPR_IMG_SMALLMAP, STR_SMALLMAP_CENTER), SetFill(1, 1),
+					NWidget(WWT_IMGBTN, COLOUR_BROWN, SM_WIDGET_BLANK),
+							SetDataTip(SPR_DOT_SMALL, STR_NULL), SetFill(1, 1),
 					NWidget(WWT_IMGBTN, COLOUR_BROWN, SM_WIDGET_CONTOUR),
 							SetDataTip(SPR_IMG_SHOW_COUNTOURS, STR_SMALLMAP_TOOLTIP_SHOW_LAND_CONTOURS_ON_MAP), SetFill(1, 1),
 					NWidget(WWT_IMGBTN, COLOUR_BROWN, SM_WIDGET_VEHICLES),
@@ -1567,6 +2182,8 @@ static const NWidgetPart _nested_smallmap_bar[] = {
 							SetDataTip(SPR_IMG_ZOOMOUT, STR_TOOLBAR_TOOLTIP_ZOOM_THE_VIEW_OUT), SetFill(1, 1),
 					NWidget(WWT_IMGBTN, COLOUR_BROWN, SM_WIDGET_TOGGLETOWNNAME),
 							SetDataTip(SPR_IMG_TOWN, STR_SMALLMAP_TOOLTIP_TOGGLE_TOWN_NAMES_ON_OFF), SetFill(1, 1),
+					NWidget(WWT_IMGBTN, COLOUR_BROWN, SM_WIDGET_LINKSTATS),
+							SetDataTip(SPR_IMG_GRAPHS, STR_SMALLMAP_TOOLTIP_SHOW_LINK_STATS_ON_MAP), SetFill(1, 1),
 					NWidget(WWT_IMGBTN, COLOUR_BROWN, SM_WIDGET_ROUTES),
 							SetDataTip(SPR_IMG_SHOW_ROUTES, STR_SMALLMAP_TOOLTIP_SHOW_TRANSPORT_ROUTES_ON), SetFill(1, 1),
 					NWidget(WWT_IMGBTN, COLOUR_BROWN, SM_WIDGET_VEGETATION),
@@ -1604,8 +2221,8 @@ static const NWidgetPart _nested_smallmap_widgets[] = {
 			NWidget(NWID_HORIZONTAL),
 				NWidget(NWID_SELECTION, INVALID_COLOUR, SM_WIDGET_SELECTINDUSTRIES),
 					NWidget(NWID_HORIZONTAL, NC_EQUALSIZE),
-						NWidget(WWT_PUSHTXTBTN, COLOUR_BROWN, SM_WIDGET_ENABLEINDUSTRIES), SetDataTip(STR_SMALLMAP_ENABLE_ALL, STR_SMALLMAP_TOOLTIP_ENABLE_ALL),
-						NWidget(WWT_PUSHTXTBTN, COLOUR_BROWN, SM_WIDGET_DISABLEINDUSTRIES), SetDataTip(STR_SMALLMAP_DISABLE_ALL, STR_SMALLMAP_TOOLTIP_DISABLE_ALL),
+						NWidget(WWT_PUSHTXTBTN, COLOUR_BROWN, SM_WIDGET_ENABLE_ALL), SetDataTip(STR_SMALLMAP_ENABLE_ALL, STR_SMALLMAP_TOOLTIP_ENABLE_ALL),
+						NWidget(WWT_PUSHTXTBTN, COLOUR_BROWN, SM_WIDGET_DISABLE_ALL), SetDataTip(STR_SMALLMAP_DISABLE_ALL, STR_SMALLMAP_TOOLTIP_DISABLE_ALL),
 						NWidget(WWT_TEXTBTN, COLOUR_BROWN, SM_WIDGET_SHOW_HEIGHT), SetDataTip(STR_SMALLMAP_SHOW_HEIGHT, STR_SMALLMAP_TOOLTIP_SHOW_HEIGHT),
 					EndContainer(),
 					NWidget(NWID_SPACER), SetFill(1, 1),
@@ -1618,7 +2235,7 @@ static const NWidgetPart _nested_smallmap_widgets[] = {
 };
 
 static const WindowDesc _smallmap_desc(
-	WDP_AUTO, 446, 314,
+	WDP_AUTO, 488, 314,
 	WC_SMALLMAP, WC_NONE,
 	WDF_UNCLICK_BUTTONS,
 	_nested_smallmap_widgets, lengthof(_nested_smallmap_widgets)
diff --git a/src/smallmap_gui.h b/src/smallmap_gui.h
index 1a2bc54..7f8aabf 100644
--- a/src/smallmap_gui.h
+++ b/src/smallmap_gui.h
@@ -12,6 +12,9 @@
 #ifndef SMALLMAP_GUI_H
 #define SMALLMAP_GUI_H
 
+/* set up the cargos to be displayed in the smallmap's route legend */
+void BuildLinkStatsLegend();
+
 void BuildIndustriesLegend();
 void ShowSmallMap();
 void BuildLandLegend();
