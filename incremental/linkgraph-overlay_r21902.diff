diff --git a/projects/openttd_vs100.vcxproj b/projects/openttd_vs100.vcxproj
index 1c3c5fa..026d8f4 100644
--- a/projects/openttd_vs100.vcxproj
+++ b/projects/openttd_vs100.vcxproj
@@ -458,6 +458,7 @@
     <ClInclude Include="..\src\landscape.h" />
     <ClInclude Include="..\src\landscape_type.h" />
     <ClInclude Include="..\src\language.h" />
+    <ClInclude Include="..\src\linkgraph_gui.h" />
     <ClInclude Include="..\src\linkgraph\demands.h" />
     <ClInclude Include="..\src\linkgraph\flowmapper.h" />
     <ClInclude Include="..\src\linkgraph\linkgraph.h" />
@@ -658,6 +659,7 @@
     <ClCompile Include="..\src\highscore_gui.cpp" />
     <ClCompile Include="..\src\industry_gui.cpp" />
     <ClCompile Include="..\src\intro_gui.cpp" />
+    <ClCompile Include="..\src\linkgraph_gui.cpp" />
     <ClCompile Include="..\src\main_gui.cpp" />
     <ClCompile Include="..\src\misc_gui.cpp" />
     <ClCompile Include="..\src\music_gui.cpp" />
diff --git a/projects/openttd_vs100.vcxproj.filters b/projects/openttd_vs100.vcxproj.filters
index e4ca8a4..fd25049 100644
--- a/projects/openttd_vs100.vcxproj.filters
+++ b/projects/openttd_vs100.vcxproj.filters
@@ -594,6 +594,9 @@
     <ClInclude Include="..\src\language.h">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="..\src\linkgraph_gui.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="..\src\linkgraph\demands.h">
       <Filter>Header Files</Filter>
     </ClInclude>
@@ -1194,6 +1197,9 @@
     <ClCompile Include="..\src\intro_gui.cpp">
       <Filter>GUI Source Code</Filter>
     </ClCompile>
+    <ClCompile Include="..\src\linkgraph_gui.cpp">
+      <Filter>GUI Source Code</Filter>
+    </ClCompile>
     <ClCompile Include="..\src\main_gui.cpp">
       <Filter>GUI Source Code</Filter>
     </ClCompile>
diff --git a/projects/openttd_vs80.vcproj b/projects/openttd_vs80.vcproj
index e80152e..d6552fb 100644
--- a/projects/openttd_vs80.vcproj
+++ b/projects/openttd_vs80.vcproj
@@ -1107,6 +1107,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\linkgraph_gui.h"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\linkgraph\demands.h"
 				>
 			</File>
@@ -1915,6 +1919,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\linkgraph_gui.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\main_gui.cpp"
 				>
 			</File>
diff --git a/projects/openttd_vs90.vcproj b/projects/openttd_vs90.vcproj
index 49fa4e6..b0e21f1 100644
--- a/projects/openttd_vs90.vcproj
+++ b/projects/openttd_vs90.vcproj
@@ -1104,6 +1104,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\linkgraph_gui.h"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\linkgraph\demands.h"
 				>
 			</File>
@@ -1912,6 +1916,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\linkgraph_gui.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\main_gui.cpp"
 				>
 			</File>
diff --git a/source.list b/source.list
index 0b0e43e..ee94698 100644
--- a/source.list
+++ b/source.list
@@ -191,6 +191,7 @@ ini_type.h
 landscape.h
 landscape_type.h
 language.h
+linkgraph_gui.h
 linkgraph/demands.h
 linkgraph/flowmapper.h
 linkgraph/linkgraph.h
@@ -410,6 +411,7 @@ group_gui.cpp
 highscore_gui.cpp
 industry_gui.cpp
 intro_gui.cpp
+linkgraph_gui.cpp
 main_gui.cpp
 misc_gui.cpp
 music_gui.cpp
diff --git a/src/linkgraph_gui.cpp b/src/linkgraph_gui.cpp
new file mode 100644
index 0000000..f8bdf18
--- /dev/null
+++ b/src/linkgraph_gui.cpp
@@ -0,0 +1,199 @@
+/* $Id$ */
+
+/*
+ * This file is part of OpenTTD.
+ * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
+ * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/** @file linkgraph_gui.cpp Implementation of linkgraph overlay GUI. */
+
+#include "stdafx.h"
+#include "widget_type.h"
+#include "window_gui.h"
+#include "company_base.h"
+#include "date_func.h"
+#include "linkgraph_gui.h"
+
+template<class Twindow, uint Twidget_id>
+void LinkGraphOverlay<Twindow, Twidget_id>::RebuildCache()
+{
+	this->cached_links.clear();
+	this->cached_stations.clear();
+
+	const NWidgetBase *wi = static_cast<const Window *>(this->window)->GetWidget<NWidgetBase>(Twidget_id);
+	DrawPixelInfo dpi;
+	dpi.left = dpi.top = 0;
+	dpi.width = wi->current_x;
+	dpi.height = wi->current_y;
+
+	const Station *sta;
+	FOR_ALL_STATIONS(sta) {
+		/* Show links between own stations or "neutral" ones like oilrigs.*/
+		if (sta->owner != INVALID_COMPANY && !HasBit(this->company_mask, sta->owner)) continue;
+		if (sta->rect.IsEmpty()) continue;
+
+		Point pta = this->window->GetStationMiddle(sta);
+
+		StationID from = sta->index;
+		StationLinkMap &seen_links = this->cached_links[from];
+
+		uint supply = 0;
+		CargoID c;
+		FOR_EACH_SET_CARGO_ID(c, this->cargo_mask) {
+			if (!CargoSpec::Get(c)->IsValid()) continue;
+
+			supply += sta->goods[c].supply;
+			const LinkStatMap &links = sta->goods[c].link_stats;
+			for (LinkStatMap::const_iterator i = links.begin(); i != links.end(); ++i) {
+				StationID to = i->first;
+				if (seen_links.find(to) != seen_links.end()) continue;
+
+				if (!Station::IsValidID(to)) continue;
+				const Station *stb = Station::Get(to);
+				if (stb->owner != INVALID_COMPANY && !HasBit(this->company_mask, stb->owner)) continue;
+				if (stb->rect.IsEmpty()) continue;
+
+				if (!this->IsLinkVisible(pta, this->window->GetStationMiddle(stb), &dpi)) continue;
+
+				this->AddLinks(sta, stb);
+				this->AddLinks(stb, sta);
+				seen_links[to]; // make sure it is created and marked as seen
+			}
+		}
+		if (this->IsPointVisible(pta, &dpi)) {
+			this->cached_stations.push_back(std::make_pair(from, supply));
+		}
+	}
+}
+
+template<class Twindow, uint Twidget_id>
+FORCEINLINE bool LinkGraphOverlay<Twindow, Twidget_id>::IsPointVisible(Point pt, const DrawPixelInfo *dpi, int padding) const
+{
+	return pt.x > dpi->left - padding && pt.y > dpi->top - padding &&
+			pt.x < dpi->left + dpi->width + padding &&
+			pt.y < dpi->top + dpi->height + padding;
+}
+
+template<class Twindow, uint Twidget_id>
+FORCEINLINE bool LinkGraphOverlay<Twindow, Twidget_id>::IsLinkVisible(Point pta, Point ptb, const DrawPixelInfo *dpi, int padding) const
+{
+	return !((pta.x < dpi->left - padding && ptb.x < dpi->left - padding) ||
+			(pta.y < dpi->top - padding && ptb.y < dpi->top - padding) ||
+			(pta.x > dpi->left + dpi->width + padding &&
+					ptb.x > dpi->left + dpi->width + padding) ||
+			(pta.y > dpi->top + dpi->height + padding &&
+					ptb.y > dpi->top + dpi->height + padding));
+}
+
+template<class Twindow, uint Twidget_id>
+void LinkGraphOverlay<Twindow, Twidget_id>::AddLinks(const Station *from, const Station *to)
+{
+	CargoID c;
+	FOR_EACH_SET_CARGO_ID(c, this->cargo_mask) {
+		if (!CargoSpec::Get(c)->IsValid()) continue;
+		const GoodsEntry &ge = from->goods[c];
+		FlowStat sum_flows = ge.GetSumFlowVia(to->index);
+		const LinkStatMap &ls_map = ge.link_stats;
+		LinkStatMap::const_iterator i = ls_map.find(to->index);
+		if (i != ls_map.end()) {
+			const LinkStat &link_stat = i->second;
+			this->AddStats(link_stat, sum_flows, this->cached_links[from->index][to->index]);
+		}
+	}
+}
+
+template<class Twindow, uint Twidget_id>
+/* static */ void LinkGraphOverlay<Twindow, Twidget_id>::AddStats(const LinkStat &orig_link, const FlowStat &orig_flow, LinkProperties &cargo)
+{
+	uint new_cap = orig_link.Capacity();
+	uint new_usg = orig_link.Usage();
+	uint new_plan = orig_flow.Planned();
+
+	/* multiply the numbers by 32 in order to avoid comparing to 0 too often. */
+	if (cargo.capacity == 0 ||
+			max(cargo.usage, cargo.planned) * 32 / (cargo.capacity + 1) < max(new_usg, new_plan) * 32 / (new_cap + 1)) {
+		cargo.capacity = new_cap;
+		cargo.usage = new_usg;
+		cargo.planned = new_plan;
+	}
+}
+
+template<class Twindow, uint Twidget_id>
+void LinkGraphOverlay<Twindow, Twidget_id>::DrawLinks(const DrawPixelInfo *dpi) const
+{
+	for (LinkMap::const_iterator i(this->cached_links.begin()); i != this->cached_links.end(); ++i) {
+		if (!Station::IsValidID(i->first)) continue;
+		Point pta = this->window->GetStationMiddle(Station::Get(i->first));
+		for (StationLinkMap::const_iterator j(i->second.begin()); j != i->second.end(); ++j) {
+			if (!Station::IsValidID(j->first)) continue;
+			Point ptb = this->window->GetStationMiddle(Station::Get(j->first));
+			if (!this->IsLinkVisible(pta, ptb, dpi)) continue;
+			if (pta.x > ptb.x || (pta.x == ptb.x && pta.y > ptb.y)) {
+				GfxDrawLine(pta.x, pta.y, ptb.x, ptb.y, _colour_gradient[COLOUR_GREY][1]);
+			}
+			Self::DrawContent(pta, ptb, j->second);
+		}
+	}
+}
+
+template<class Twindow, uint Twidget_id>
+/* static */ void LinkGraphOverlay<Twindow, Twidget_id>::DrawContent(Point pta, Point ptb, const LinkProperties &cargo)
+{
+	if (cargo.capacity <= 0) return;
+	int direction_y = (pta.x < ptb.x ? 1 : -1);
+	int direction_x = (pta.y > ptb.y ? 1 : -1);;
+
+	uint usage_or_plan = min(cargo.capacity * 2, max(cargo.usage, cargo.planned));
+	int colour = Self::LINK_COLOURS[usage_or_plan * lengthof(Self::LINK_COLOURS) / (cargo.capacity * 2 + 1)];
+	GfxDrawLine(pta.x + direction_x, pta.y, ptb.x + direction_x, ptb.y, colour);
+	GfxDrawLine(pta.x, pta.y + direction_y, ptb.x, ptb.y + direction_y, colour);
+}
+
+/**
+ * Draw dots for stations into the smallmap. The dots' sizes are determined by the amount of
+ * cargo produced there, their colours by the type of cargo produced.
+ */
+template<class Twindow, uint Twidget_id>
+void LinkGraphOverlay<Twindow, Twidget_id>::DrawStationDots(const DrawPixelInfo *dpi) const
+{
+	for (StationSupplyList::const_iterator i(this->cached_stations.begin()); i != this->cached_stations.end(); ++i) {
+		const Station *st = Station::GetIfValid(i->first);
+		if (st == NULL) continue;
+		Point pt = this->window->GetStationMiddle(st);
+		if (!this->IsPointVisible(pt, dpi, 10)) continue;
+
+		uint r = 1;
+		if (i->second >= 20) r++;
+		if (i->second >= 90) r++;
+		if (i->second >= 160) r++;
+
+		Self::DrawVertex(pt.x, pt.y, r, _colour_gradient[Company::Get(st->owner)->colour][5], _colour_gradient[COLOUR_GREY][1]);
+	}
+}
+
+/**
+ * Draw a square symbolizing a producer of cargo.
+ * @param x the x coordinate of the middle of the vertex
+ * @param y the y coordinate of the middle of the vertex
+ * @param size the x and y extend of the vertex
+ * @param colour the colour with which the vertex will be filled
+ * @param border_colour the colour for the border of the vertex
+ */
+template<class Twindow, uint Twidget_id>
+/* static */ void LinkGraphOverlay<Twindow, Twidget_id>::DrawVertex(int x, int y, int size, int colour, int border_colour)
+{
+	size--;
+	int w1 = size / 2;
+	int w2 = size / 2 + size % 2;
+
+	GfxFillRect(x - w1, y - w1, x + w2, y + w2, colour);
+
+	w1++;
+	w2++;
+	GfxDrawLine(x - w1, y - w1, x + w2, y - w1, border_colour);
+	GfxDrawLine(x - w1, y + w2, x + w2, y + w2, border_colour);
+	GfxDrawLine(x - w1, y - w1, x - w1, y + w2, border_colour);
+	GfxDrawLine(x + w2, y - w1, x + w2, y + w2, border_colour);
+}
diff --git a/src/linkgraph_gui.h b/src/linkgraph_gui.h
new file mode 100644
index 0000000..b5db2cf
--- /dev/null
+++ b/src/linkgraph_gui.h
@@ -0,0 +1,79 @@
+/* $Id$ */
+
+/*
+ * This file is part of OpenTTD.
+ * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
+ * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/** @file linkgraph_gui.h Declaration of linkgraph overlay GUI. */
+
+#ifndef LINKGRAPH_GUI_H_
+#define LINKGRAPH_GUI_H_
+
+#include "company_func.h"
+#include "station_base.h"
+#include <map>
+#include <list>
+
+/**
+ * Properties of a link between two stations.
+ */
+struct LinkProperties {
+	LinkProperties() : capacity(0), usage(0), planned(0) {}
+
+	uint capacity;
+	uint usage;
+	uint planned;
+};
+
+/**
+ * Handles drawing of links into some window.
+ * @tparam Twindow window type to be drawn into. Must provide "Point GetStationMiddle(const Station *st) const"
+ * @tparam Twidget_id ID of widget in window to be drawn into.
+ */
+template<class Twindow, uint Twidget_id>
+class LinkGraphOverlay {
+public:
+	typedef LinkGraphOverlay<Twindow, Twidget_id> Self;
+	typedef std::map<StationID, LinkProperties> StationLinkMap;
+	typedef std::map<StationID, StationLinkMap> LinkMap;
+	typedef std::list<std::pair<StationID, uint> > StationSupplyList;
+
+	static const uint8 LINK_COLOURS[];
+
+	/**
+	 * Create a link graph overlay for the specified window.
+	 * @param w Window to be drawn into.
+	 */
+	LinkGraphOverlay(const Twindow *w, uint32 cargo_mask = 0xFFFF,
+			uint32 company_mask = 1 << _local_company) :
+			window(w), cargo_mask(cargo_mask), company_mask(company_mask)
+	{}
+
+	void RebuildCache();
+	void Draw(const DrawPixelInfo *dpi) const { this->DrawLinks(dpi); this->DrawStationDots(dpi); }
+	void SetCargoMask(uint32 cargo_mask) {this->cargo_mask = cargo_mask;}
+	void SetCompanyMask(uint32 company_mask) {this->company_mask = company_mask;}
+
+protected:
+	const Twindow *window;             ///< Window to be drawn into.
+	uint32 cargo_mask;                 ///< Bitmask of cargos to be displayed.
+	uint32 company_mask;               ///< Bitmask of companies to be displayed.
+	LinkMap cached_links;              ///< Cache for links to reduce recalculation.
+	StationSupplyList cached_stations; ///< Cache for stations to be drawn.
+
+	void DrawForwBackLinks(Point pta, StationID sta, Point ptb, StationID stb) const;
+	void AddLinks(const Station *sta, const Station *stb);
+	void DrawLinks(const DrawPixelInfo *dpi) const;
+	void DrawStationDots(const DrawPixelInfo *dpi) const;
+	bool IsLinkVisible(Point pta, Point ptb, const DrawPixelInfo *dpi, int padding = 0) const;
+	bool IsPointVisible(Point pt, const DrawPixelInfo *dpi, int padding = 0) const;
+
+	static void AddStats(const LinkStat &orig_link, const FlowStat &orig_flow, LinkProperties &cargo);
+	static void DrawContent(Point pta, Point ptb, const LinkProperties &cargo);
+	static void DrawVertex(int x, int y, int size, int colour, int border_colour);
+};
+
+#endif /* LINKGRAPH_GUI_H_ */
